{"version":3,"sources":["empt.png","user.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","state","bla","home","count","input_name","input_num","addsubscriber","_this","setState","deletesubscriber","c","dcount","target","value","console","log","splice","addtodata","toString","length","dummy","name","num","concat","alert","change","e","change1","_this2","this","react_default","a","createElement","className","id","class","src","empt","onClick","map","BLA","index","key","type","onChange","required","usr","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.317b0565.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/empt.e2909885.png\";","module.exports = __webpack_public_path__ + \"static/media/user.40b67851.png\";","import React, { Component } from 'react';\nimport empt from './empt.png';\nimport usr from './user.png';\nimport './App.css';\n\n\n\nclass App extends Component {\n\n  state = {\n    bla : [],\n    home : true,\n    count : 0,\n    input_name : '',\n    input_num : ''\n  }\n\n  addsubscriber = () => {\n    this.setState({home: false});\n  }\n\n  deletesubscriber = (c) => {\n    const dcount = c.target.value;\n    console.log(dcount);\n    this.state.bla.splice(dcount, 1);\n    console.log(this.state.bla);\n    this.setState({home: true});\n  }\n\n  addtodata = () => {\n    if(!this.state.input_name || !this.state.input_num || this.state.input_num.toString().length != 10 ){\n      alert(\"Please Enter a valid Name and Number\");\n    }\n    else{\n      const dummy = [{'count' : this.state.count ,'name' : this.state.input_name ,'num' : this.state.input_num}];\n      this.setState({bla: this.state.bla.concat(dummy)});\n      this.setState({count: this.state.count += 1});\n    }\n    this.setState({home: true});\n  }\n\n  change = (e) => {\n    this.setState({input_name: e.target.value});\n\n  }\n\n  change1 = (e) => {\n    this.setState({input_num: e.target.value});\n  }\n\n  render() {\n    if(!this.state.home){\n      return (\n        <div className=\"App\">\n          <h2 id=\"head\"> ADD SUBSCRIBER </h2>\n          <div id=\"sub-form\" >\n            <span class=\"label\" >Name :</span><br/><input type=\"text\" class=\"usr-input\" onChange={(e) => this.change(e)} required /><br/>\n            <span class=\"label\" >Phone Number :</span><br/><input type=\"tel\" class=\"usr-input\" onChange={(e) => this.change1(e)} required /><br/><br/>\n            <h5 class=\"bla1\"><b>Subscriber to be added:</b></h5>\n            <img class=\"profile-img\" src={usr} />\n            <p class=\"bla2\">Name: {this.state.input_name}</p>\n            <p class=\"bla2\">Phone: {this.state.input_num}</p>  \n          </div>\n          <button class=\"add-btn\" onClick={this.addtodata}><b>ADD</b></button>\n        </div>  \n      );\n    }\n    else if(this.state.home && !this.state.bla[0]){\n      return (\n        <div className=\"App\">\n          <h2 id=\"head\">PHONE DIRECTORY </h2>\n          <div class=\"display\">\n            <h4 class=\"emptdir\">Directory Empty!!</h4><span><img class=\"empt-img\" src={empt}/></span>\n          </div>\n          <button class=\"add-btn\" onClick={this.addsubscriber}> <b> Add Subscriber</b> </button>\n        </div>\n      );\n    }\n    else{\n      return (\n        <div className=\"App\">\n          <h2 id=\"head\">PHONE DIRECTORY </h2>\n          <div class=\"display\">\n            <div class=\"subscriber1\"><p class=\"nme\">Name</p><p class=\"phno\">Phone Number</p></div>\n            {this.state.bla.map((BLA, index) => {\n              return <div class=\"subscriber\" key={index}><p class=\"nme\">{BLA.name}</p><p class=\"phno\">{BLA.num} <button class=\"del-btn\" value={index} onClick={(c) => this.deletesubscriber(c)}> DELETE </button></p></div>\n            })}\n          </div>\n          <button class=\"add-btn\" onClick={this.addsubscriber}> <b> Add Subscriber</b> </button>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}